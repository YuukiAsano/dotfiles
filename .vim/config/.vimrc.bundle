"---------------
"for NeoBundle
"---------------
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'Blackrush/vim-gocode', {"autoload": {"filetypes": ['go']}}
NeoBundle 'Shougo/neocomplete.vim'
NeoBundleLazy 'Rip-Rip/clang_complete', {
    \ 'autoload' : {
    \     'filetypes' : ['c', 'cpp'],
    \    },
    \ }
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'kana/vim-smartinput'
"NeoBundleLazy 'thinca/vim-quickrun', {
"      \ 'depends' : 'Shougo/vimproc',
"      \ 'autoload' : {
"      \   'mappings' : [['nxo', '<Plug>(quickrun)']],
"      \   'commands' : 'QuickRun' }}
NeoBundleLazy 'tpope/vim-surround', {
    \ 'autoload' : {
      \   'mappings' : [
      \     ['nx', '<Plug>Dsurround'], ['nx', '<Plug>Csurround' ],
      \     ['nx', '<Plug>Ysurround' ], ['nx', '<Plug>YSurround' ],
      \     ['nx', '<Plug>Yssurround'], ['nx', '<Plug>YSsurround'],
      \     ['nx', '<Plug>YSsurround'], ['nx', '<Plug>VgSurround'],
      \     ['nx', '<Plug>VSurround']
      \ ] }}

" You can specify revision/branch/tag.
NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
NeoBundle 'mattn/emmet-vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'ujihisa/unite-colorscheme' " A unite.vim plugin

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"---------------
" NERDTree
"---------------
" Ctrl + n でNERDTreeを開く/閉じる
nnoremap <silent><C-N> :NERDTree<CR>

"---------------
" vim-gocode
"---------------
auto BufWritePre *.go Fmt

"---------------
" neocomplete
"---------------
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#force_overwrite_completefunc = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"---------------
" 'Rip-Rip/clang_complete'
"---------------
set completeopt=menuone
let g:clang_complete_auto = 1 
let g:clang_auto_select = 0
let g:clang_complete_copen = 0
let g:clang_use_library = 1
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'
let g:clang_debug = 0
let g:clang_user_options = '-std= c++11'

"---------------
" 'smartinput'
"---------------
call smartinput#define_rule({'at': '\%#', 'char': '(', 'input': '()<Left>'})

"---------------
" 'quickrun'
"---------------
"let hooks=neobundle#get_hooks('vim-quickrun')
"function! hooks.on_source(bundle)
"    let g:quickrun_config = {}
"endfunction

"---------------
" 'unite'
"---------------
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> [space]y :<C-u>Unite history/yank<CR>
nnoremap <silent> [space]b :<C-u>Unite buffer<CR>
nnoremap <silent> [space]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [space]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [space]u :<C-u>Unite file_mru buffer<CR>

"---------------
" 'unite-outline'
"---------------
let g:unite_split_rule = 'botright'
noremap [space]o <ESC>:Unite -vertical -winwidth=60 outline<Return>

"---------------
" 'neosnippet'
"---------------
map <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

